digraph "classes_tidy3d_geometry" {
rankdir=BT
charset="utf-8"
"tidy3d.components.geometry.base.Box" [color="black", fontcolor="black", label=<{Box|size : Union<br ALIGN="LEFT"/>|bounds(): Bound<br ALIGN="LEFT"/>compute_derivatives(derivative_info: DerivativeInfo): AutogradFieldMap<br ALIGN="LEFT"/>derivative_face(min_max_index: int, axis_normal: Axis, derivative_info: DerivativeInfo): float<br ALIGN="LEFT"/>derivative_faces(derivative_info: DerivativeInfo): Bound<br ALIGN="LEFT"/>derivatives_center_size(vjps_faces: Bound): dict[str, Coordinate]<br ALIGN="LEFT"/>from_bounds(rmin: Coordinate, rmax: Coordinate)<br ALIGN="LEFT"/>geometry()<br ALIGN="LEFT"/>inside(x: np.ndarray[float], y: np.ndarray[float], z: np.ndarray[float]): np.ndarray[bool]<br ALIGN="LEFT"/>intersections_plane(x: float, y: float, z: float)<br ALIGN="LEFT"/>intersections_with(other)<br ALIGN="LEFT"/>surfaces(size: Size, center: Coordinate)<br ALIGN="LEFT"/>surfaces_with_exclusion(size: Size, center: Coordinate)<br ALIGN="LEFT"/>zero_dims(): List[Axis]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tidy3d.components.geometry.base.Centered" [color="black", fontcolor="black", label=<{Centered|center : Union<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tidy3d.components.geometry.base.Circular" [color="black", fontcolor="black", label=<{Circular|radius : NonNegativeFloat, float<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tidy3d.components.geometry.base.ClipOperation" [color="black", fontcolor="black", label=<{ClipOperation|geometry_a : Annotated<br ALIGN="LEFT"/>geometry_b : Annotated<br ALIGN="LEFT"/>operation : Literal<br ALIGN="LEFT"/>|bounds(): Bound<br ALIGN="LEFT"/>inside(x: np.ndarray[float], y: np.ndarray[float], z: np.ndarray[float]): np.ndarray[bool]<br ALIGN="LEFT"/>inside_meshgrid(x: np.ndarray[float], y: np.ndarray[float], z: np.ndarray[float]): np.ndarray[bool]<br ALIGN="LEFT"/>intersections_plane(x: float, y: float, z: float): List[Shapely]<br ALIGN="LEFT"/>intersections_tilted_plane(normal: Coordinate, origin: Coordinate, to_2D: MatrixReal4x4): List[Shapely]<br ALIGN="LEFT"/>to_polygon_list(base_geometry: Shapely): List[Shapely]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tidy3d.components.geometry.polyslab.ComplexPolySlabBase" [color="black", fontcolor="black", label=<{ComplexPolySlabBase|geometry_group<br ALIGN="LEFT"/>sub_polyslabs<br ALIGN="LEFT"/>|from_gds(gds_cell, axis: Axis, slab_bounds: Tuple[float, float], gds_layer: int, gds_dtype: int, gds_scale: pydantic.PositiveFloat, dilation: float, sidewall_angle: float, reference_plane: PlanePosition): List[PolySlab]<br ALIGN="LEFT"/>intersections_tilted_plane(normal: Coordinate, origin: Coordinate, to_2D: MatrixReal4x4): List[Shapely]<br ALIGN="LEFT"/>no_self_intersecting_polygon_during_extrusion(val, values)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tidy3d.components.geometry.primitives.Cylinder" [color="black", fontcolor="black", label=<{Cylinder|center_axis<br ALIGN="LEFT"/>length : NonNegativeFloat, float<br ALIGN="LEFT"/>length_axis<br ALIGN="LEFT"/>radius : Union<br ALIGN="LEFT"/>|bounds(): Bound<br ALIGN="LEFT"/>compute_derivatives(derivative_info: DerivativeInfo): AutogradFieldMap<br ALIGN="LEFT"/>inside(x: np.ndarray[float], y: np.ndarray[float], z: np.ndarray[float]): np.ndarray[bool]<br ALIGN="LEFT"/>radius_bottom(): float<br ALIGN="LEFT"/>radius_max(): float<br ALIGN="LEFT"/>radius_min(): float<br ALIGN="LEFT"/>radius_top(): float<br ALIGN="LEFT"/>to_polyslab(num_pts_circumference: int): PolySlab<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tidy3d.components.geometry.base.Geometry" [color="black", fontcolor="green", label=<{Geometry|<br ALIGN="LEFT"/>|add_ax_labels_lims(axis: Axis, ax: Ax, buffer: float): Ax<br ALIGN="LEFT"/>bounding_box()<br ALIGN="LEFT"/><I>bounds</I>(): Bound<br ALIGN="LEFT"/>bounds_intersection(bounds1: Bound, bounds2: Bound): Bound<br ALIGN="LEFT"/>car_2_sph(x: float, y: float, z: float): Tuple[float, float, float]<br ALIGN="LEFT"/>car_2_sph_field(f_x: float, f_y: float, f_z: float, theta: float, phi: float): Tuple[complex, complex, complex]<br ALIGN="LEFT"/><I>compute_derivatives</I>(derivative_info: DerivativeInfo): AutogradFieldMap<br ALIGN="LEFT"/>evaluate_inf_shape(shape: Shapely): Shapely<br ALIGN="LEFT"/>from_gds(gds_cell, axis: Axis, slab_bounds: Tuple[float, float], gds_layer: int, gds_dtype: int, gds_scale: pydantic.PositiveFloat, dilation: float, sidewall_angle: float, reference_plane: PlanePosition): Geometry<br ALIGN="LEFT"/>from_shapely(shape: Shapely, axis: Axis, slab_bounds: Tuple[float, float], dilation: float, sidewall_angle: float, reference_plane: PlanePosition): Geometry<br ALIGN="LEFT"/>inside(x: np.ndarray[float], y: np.ndarray[float], z: np.ndarray[float]): np.ndarray[bool]<br ALIGN="LEFT"/>inside_meshgrid(x: np.ndarray[float], y: np.ndarray[float], z: np.ndarray[float]): np.ndarray[bool]<br ALIGN="LEFT"/>intersections_2dbox(plane: Box): List[Shapely]<br ALIGN="LEFT"/>intersections_plane(x: float, y: float, z: float): List[Shapely]<br ALIGN="LEFT"/><I>intersections_tilted_plane</I>(normal: Coordinate, origin: Coordinate, to_2D: MatrixReal4x4): List[Shapely]<br ALIGN="LEFT"/>intersects(other, strict_inequality: Tuple[bool, bool, bool]): bool<br ALIGN="LEFT"/>intersects_axis_position(axis: int, position: float): bool<br ALIGN="LEFT"/>intersects_plane(x: float, y: float, z: float): bool<br ALIGN="LEFT"/>kspace_2_sph(ux: float, uy: float, axis: Axis): Tuple[float, float]<br ALIGN="LEFT"/>load_gds_vertices_gdspy(gds_cell, gds_layer: int, gds_dtype: int, gds_scale: pydantic.PositiveFloat): List[ArrayFloat2D]<br ALIGN="LEFT"/>load_gds_vertices_gdstk(gds_cell, gds_layer: int, gds_dtype: int, gds_scale: pydantic.PositiveFloat): List[ArrayFloat2D]<br ALIGN="LEFT"/>make_shapely_box(minx: float, miny: float, maxx: float, maxy: float): shapely.box<br ALIGN="LEFT"/>make_shapely_point(minx: float, miny: float): shapely.Point<br ALIGN="LEFT"/>parse_xyz_kwargs(): Tuple[Axis, float]<br ALIGN="LEFT"/>plot(x: float, y: float, z: float, ax: Ax): Ax<br ALIGN="LEFT"/>plot_params()<br ALIGN="LEFT"/>plot_shape(shape: Shapely, plot_params: PlotParams, ax: Ax): Ax<br ALIGN="LEFT"/>pop_axis(coord: Tuple[Any, Any, Any], axis: int): Tuple[Any, Tuple[Any, Any]]<br ALIGN="LEFT"/>reflect_points(points: ArrayFloat3D, polar_axis: Axis, angle_theta: float, angle_phi: float): ArrayFloat3D<br ALIGN="LEFT"/>rotate_points(points: ArrayFloat3D, axis: Coordinate, angle: float): ArrayFloat3D<br ALIGN="LEFT"/>rotated(angle: float, axis: Union[Axis, Coordinate]): Geometry<br ALIGN="LEFT"/>scaled(x: float, y: float, z: float): Geometry<br ALIGN="LEFT"/>sph_2_car(r: float, theta: float, phi: float): Tuple[float, float, float]<br ALIGN="LEFT"/>sph_2_car_field(f_r: float, f_theta: float, f_phi: float, theta: float, phi: float): Tuple[complex, complex, complex]<br ALIGN="LEFT"/>surface_area(bounds: Bound)<br ALIGN="LEFT"/>to_gds(cell, x: float, y: float, z: float, gds_layer: pydantic.NonNegativeInt, gds_dtype: pydantic.NonNegativeInt): None<br ALIGN="LEFT"/>to_gds_file(fname: str, x: float, y: float, z: float, gds_layer: pydantic.NonNegativeInt, gds_dtype: pydantic.NonNegativeInt, gds_cell_name: str): None<br ALIGN="LEFT"/>to_gdspy(x: float, y: float, z: float, gds_layer: pydantic.NonNegativeInt, gds_dtype: pydantic.NonNegativeInt): List<br ALIGN="LEFT"/>to_gdstk(x: float, y: float, z: float, gds_layer: pydantic.NonNegativeInt, gds_dtype: pydantic.NonNegativeInt): List<br ALIGN="LEFT"/>translated(x: float, y: float, z: float): Geometry<br ALIGN="LEFT"/>unpop_axis(ax_coord: Any, plane_coords: Tuple[Any, Any], axis: int): Tuple[Any, Any, Any]<br ALIGN="LEFT"/>volume(bounds: Bound)<br ALIGN="LEFT"/>zero_dims(): List[Axis]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tidy3d.components.geometry.base.GeometryGroup" [color="black", fontcolor="black", label=<{GeometryGroup|geometries : Tuple[annotate_type(GeometryType), ...]<br ALIGN="LEFT"/>|bounds(): Bound<br ALIGN="LEFT"/>compute_derivatives(derivative_info: DerivativeInfo): AutogradFieldMap<br ALIGN="LEFT"/>inside(x: np.ndarray[float], y: np.ndarray[float], z: np.ndarray[float]): np.ndarray[bool]<br ALIGN="LEFT"/>inside_meshgrid(x: np.ndarray[float], y: np.ndarray[float], z: np.ndarray[float]): np.ndarray[bool]<br ALIGN="LEFT"/>intersections_plane(x: float, y: float, z: float): List[Shapely]<br ALIGN="LEFT"/>intersections_tilted_plane(normal: Coordinate, origin: Coordinate, to_2D: MatrixReal4x4): List[Shapely]<br ALIGN="LEFT"/>intersects_axis_position(axis: float, position: float): bool<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tidy3d.components.geometry.base.Planar" [color="black", fontcolor="black", label=<{Planar|axis : Literal<br ALIGN="LEFT"/>center_axis<br ALIGN="LEFT"/>finite_length_axis<br ALIGN="LEFT"/>length_axis<br ALIGN="LEFT"/>reference_plane : Literal<br ALIGN="LEFT"/>sidewall_angle : float<br ALIGN="LEFT"/>|intersections_plane(x: float, y: float, z: float)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tidy3d.components.geometry.polyslab.PolySlab" [color="black", fontcolor="black", label=<{PolySlab|center_axis<br ALIGN="LEFT"/>dilation : float<br ALIGN="LEFT"/>length_axis<br ALIGN="LEFT"/>slab_bounds : Tuple[float, float]<br ALIGN="LEFT"/>vertices : Union<br ALIGN="LEFT"/>|array_to_vertices(arr_vertices: np.ndarray): ArrayFloat2D<br ALIGN="LEFT"/>base_polygon(): np.ndarray<br ALIGN="LEFT"/>bounds(): Bound<br ALIGN="LEFT"/>compute_derivative_vertices(derivative_info: DerivativeInfo): TracedVertices<br ALIGN="LEFT"/>compute_derivatives(derivative_info: DerivativeInfo): AutogradFieldMap<br ALIGN="LEFT"/>correct_shape(val)<br ALIGN="LEFT"/>edge_basis_vectors(edges: np.ndarray): dict[str, np.ndarray]<br ALIGN="LEFT"/>from_gds(gds_cell, axis: Axis, slab_bounds: Tuple[float, float], gds_layer: int, gds_dtype: int, gds_scale: pydantic.PositiveFloat, dilation: float, sidewall_angle: float, reference_plane: PlanePosition): List[PolySlab]<br ALIGN="LEFT"/>inside(x: np.ndarray[float], y: np.ndarray[float], z: np.ndarray[float]): np.ndarray[bool]<br ALIGN="LEFT"/>is_ccw(): bool<br ALIGN="LEFT"/>make_shapely_polygon(vertices: ArrayLike): shapely.Polygon<br ALIGN="LEFT"/>middle_polygon(): np.ndarray<br ALIGN="LEFT"/>no_complex_self_intersecting_polygon_at_reference_plane(val, values)<br ALIGN="LEFT"/>no_self_intersecting_polygon_during_extrusion(val, values)<br ALIGN="LEFT"/>normalize_vect(arr: np.ndarray): np.ndarray<br ALIGN="LEFT"/>pop_axis_vect(coord: np.ndarray): Tuple[np.ndarray, Tuple[np.ndarray, np.ndarray]]<br ALIGN="LEFT"/>reference_polygon(): np.ndarray<br ALIGN="LEFT"/>slab_bounds_order(val)<br ALIGN="LEFT"/>top_polygon(): np.ndarray<br ALIGN="LEFT"/>unpop_axis_vect(ax_coords: np.ndarray, plane_coords: np.ndarray): np.ndarray<br ALIGN="LEFT"/>vertices_to_array(vertices_tuple: ArrayFloat2D): np.ndarray<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tidy3d.components.geometry.base.SimplePlaneIntersection" [color="black", fontcolor="black", label=<{SimplePlaneIntersection|<br ALIGN="LEFT"/>|intersections_tilted_plane(normal: Coordinate, origin: Coordinate, to_2D: MatrixReal4x4): List[Shapely]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tidy3d.components.geometry.primitives.Sphere" [color="black", fontcolor="black", label=<{Sphere|<br ALIGN="LEFT"/>|bounds(): Bound<br ALIGN="LEFT"/>inside(x: np.ndarray[float], y: np.ndarray[float], z: np.ndarray[float]): np.ndarray[bool]<br ALIGN="LEFT"/>intersections_plane(x: float, y: float, z: float)<br ALIGN="LEFT"/>intersections_tilted_plane(normal: Coordinate, origin: Coordinate, to_2D: MatrixReal4x4): List[Shapely]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tidy3d.components.geometry.base.Transformed" [color="black", fontcolor="black", label=<{Transformed|geometry : Annotated<br ALIGN="LEFT"/>transform : ArrayLike[]<br ALIGN="LEFT"/>|bounds(): Bound<br ALIGN="LEFT"/>inside(x: np.ndarray[float], y: np.ndarray[float], z: np.ndarray[float]): np.ndarray[bool]<br ALIGN="LEFT"/>intersections_tilted_plane(normal: Coordinate, origin: Coordinate, to_2D: MatrixReal4x4): List[Shapely]<br ALIGN="LEFT"/>inverse(): MatrixReal4x4<br ALIGN="LEFT"/>preserves_axis(transform: MatrixReal4x4, axis: Axis): bool<br ALIGN="LEFT"/>rotation(angle: float, axis: Union[Axis, Coordinate]): MatrixReal4x4<br ALIGN="LEFT"/>scaling(x: float, y: float, z: float): MatrixReal4x4<br ALIGN="LEFT"/>translation(x: float, y: float, z: float): MatrixReal4x4<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tidy3d.components.geometry.mesh.TriangleMesh" [color="black", fontcolor="black", label=<{TriangleMesh|mesh_dataset : Optional[TriangleMeshDataset]<br ALIGN="LEFT"/>|bounds(): Bound<br ALIGN="LEFT"/>fill_holes(): TriangleMesh<br ALIGN="LEFT"/>fix_winding(): TriangleMesh<br ALIGN="LEFT"/>from_stl(filename: str, scale: float, origin: Tuple[float, float, float], solid_index: int): Union[TriangleMesh, base.GeometryGroup]<br ALIGN="LEFT"/>from_triangles(triangles: np.ndarray): TriangleMesh<br ALIGN="LEFT"/>from_trimesh(mesh: trimesh.Trimesh): TriangleMesh<br ALIGN="LEFT"/>from_vertices_faces(vertices: np.ndarray, faces: np.ndarray): TriangleMesh<br ALIGN="LEFT"/>inside(x: np.ndarray[float], y: np.ndarray[float], z: np.ndarray[float]): np.ndarray[bool]<br ALIGN="LEFT"/>intersections_plane(x: float, y: float, z: float): List[Shapely]<br ALIGN="LEFT"/>intersections_tilted_plane(normal: Coordinate, origin: Coordinate, to_2D: MatrixReal4x4): List[Shapely]<br ALIGN="LEFT"/>plot(x: float, y: float, z: float, ax: Ax): Ax<br ALIGN="LEFT"/>triangles(): np.ndarray<br ALIGN="LEFT"/>trimesh()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tidy3d.components.geometry.triangulation.Vertex" [color="black", fontcolor="black", label=<{Vertex|convexity : float<br ALIGN="LEFT"/>coordinate : ArrayLike[]<br ALIGN="LEFT"/>index : int<br ALIGN="LEFT"/>is_ear : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tidy3d.components.geometry.base.Box" -> "tidy3d.components.geometry.base.Centered" [arrowhead="empty", arrowtail="none"];
"tidy3d.components.geometry.base.Box" -> "tidy3d.components.geometry.base.SimplePlaneIntersection" [arrowhead="empty", arrowtail="none"];
"tidy3d.components.geometry.base.Centered" -> "tidy3d.components.geometry.base.Geometry" [arrowhead="empty", arrowtail="none"];
"tidy3d.components.geometry.base.Circular" -> "tidy3d.components.geometry.base.Geometry" [arrowhead="empty", arrowtail="none"];
"tidy3d.components.geometry.base.ClipOperation" -> "tidy3d.components.geometry.base.Geometry" [arrowhead="empty", arrowtail="none"];
"tidy3d.components.geometry.base.GeometryGroup" -> "tidy3d.components.geometry.base.Geometry" [arrowhead="empty", arrowtail="none"];
"tidy3d.components.geometry.base.Planar" -> "tidy3d.components.geometry.base.Geometry" [arrowhead="empty", arrowtail="none"];
"tidy3d.components.geometry.base.Planar" -> "tidy3d.components.geometry.base.SimplePlaneIntersection" [arrowhead="empty", arrowtail="none"];
"tidy3d.components.geometry.base.SimplePlaneIntersection" -> "tidy3d.components.geometry.base.Geometry" [arrowhead="empty", arrowtail="none"];
"tidy3d.components.geometry.base.Transformed" -> "tidy3d.components.geometry.base.Geometry" [arrowhead="empty", arrowtail="none"];
"tidy3d.components.geometry.mesh.TriangleMesh" -> "tidy3d.components.geometry.base.Geometry" [arrowhead="empty", arrowtail="none"];
"tidy3d.components.geometry.polyslab.ComplexPolySlabBase" -> "tidy3d.components.geometry.polyslab.PolySlab" [arrowhead="empty", arrowtail="none"];
"tidy3d.components.geometry.polyslab.PolySlab" -> "tidy3d.components.geometry.base.Planar" [arrowhead="empty", arrowtail="none"];
"tidy3d.components.geometry.primitives.Cylinder" -> "tidy3d.components.geometry.base.Centered" [arrowhead="empty", arrowtail="none"];
"tidy3d.components.geometry.primitives.Cylinder" -> "tidy3d.components.geometry.base.Circular" [arrowhead="empty", arrowtail="none"];
"tidy3d.components.geometry.primitives.Cylinder" -> "tidy3d.components.geometry.base.Planar" [arrowhead="empty", arrowtail="none"];
"tidy3d.components.geometry.primitives.Sphere" -> "tidy3d.components.geometry.base.Centered" [arrowhead="empty", arrowtail="none"];
"tidy3d.components.geometry.primitives.Sphere" -> "tidy3d.components.geometry.base.Circular" [arrowhead="empty", arrowtail="none"];
}
