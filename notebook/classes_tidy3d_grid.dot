digraph "classes_tidy3d" {
rankdir=BT
charset="utf-8"
"tidy3d.components.grid.grid_spec.AutoGrid" [color="black", fontcolor="black", label=<{AutoGrid|dl_min : NonNegativeFloat, float<br ALIGN="LEFT"/>max_scale : float<br ALIGN="LEFT"/>mesher : Union<br ALIGN="LEFT"/>min_steps_per_wvl : float<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tidy3d.components.grid.grid.Coords" [color="black", fontcolor="black", label=<{Coords|to_dict<br ALIGN="LEFT"/>to_list<br ALIGN="LEFT"/>x : ArrayLike[]<br ALIGN="LEFT"/>y : ArrayLike[]<br ALIGN="LEFT"/>z : ArrayLike[]<br ALIGN="LEFT"/>|spatial_interp(array: Union[SpatialDataArray, ScalarFieldDataArray, UnstructuredGridDatasetType], interp_method: InterpMethod, fill_value: Union[Literal['extrapolate'], float]): Union[SpatialDataArray, ScalarFieldDataArray]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tidy3d.components.grid.grid_spec.CustomGrid" [color="black", fontcolor="black", label=<{CustomGrid|custom_offset : float<br ALIGN="LEFT"/>dl : Tuple[pd.PositiveFloat, ...]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tidy3d.components.grid.grid_spec.CustomGridBoundaries" [color="black", fontcolor="black", label=<{CustomGridBoundaries|coords : ArrayLike[]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tidy3d.components.grid.grid.FieldGrid" [color="black", fontcolor="black", label=<{FieldGrid|x<br ALIGN="LEFT"/>y<br ALIGN="LEFT"/>z<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tidy3d.components.grid.mesher.GradedMesher" [color="black", fontcolor="black", label=<{GradedMesher|<br ALIGN="LEFT"/>|bounds_2d_tree(struct_bbox: List[ArrayFloat1D])<br ALIGN="LEFT"/>contained_2d(bbox0: ArrayFloat1D, query_bbox: List[ArrayFloat1D]): List[ArrayFloat1D]<br ALIGN="LEFT"/>contains_3d(bbox0: ArrayFloat1D, query_bbox: List[ArrayFloat1D]): List[int]<br ALIGN="LEFT"/>filter_min_step(interval_coords: List[float], max_steps: List[float]): Tuple[List[float], List[float]]<br ALIGN="LEFT"/>filter_structures_effective_dl(structures: List[StructureType], axis: Axis): List[StructureType]<br ALIGN="LEFT"/>grid_grow_decrease_in_interval(left_dl: float, right_dl: float, max_scale: float, len_interval: float): ArrayFloat1D<br ALIGN="LEFT"/>grid_grow_in_interval(small_dl: float, max_scale: float, len_interval: float): ArrayFloat1D<br ALIGN="LEFT"/>grid_grow_plateau_decrease_in_interval(left_dl: float, right_dl: float, max_dl: float, max_scale: float, len_interval: float): ArrayFloat1D<br ALIGN="LEFT"/>grid_grow_plateau_in_interval(small_dl: float, large_dl: float, max_scale: float, len_interval: float): ArrayFloat1D<br ALIGN="LEFT"/>grid_multiple_interval_analy_refinement(max_dl_list: ArrayFloat1D, len_interval_list: ArrayFloat1D, max_scale: float, is_periodic: bool): Tuple[ArrayFloat1D, ArrayFloat1D]<br ALIGN="LEFT"/>grid_type_in_interval(left_dl: float, right_dl: float, max_dl: float, max_scale: float, len_interval: float): int<br ALIGN="LEFT"/>insert_bbox(intervals: Dict[str, List], str_ind: int, str_bbox: ArrayFloat1D, bbox_contained_2d: List[ArrayFloat1D], min_step: float): Dict[str, List]<br ALIGN="LEFT"/>insert_snapping_points(axis: Axis, interval_coords: ArrayFloat1D, max_dl_list: ArrayFloat1D, snapping_points: List[Coordinate]): Tuple[ArrayFloat1D, ArrayFloat1D]<br ALIGN="LEFT"/>is_close(coord: float, interval_coords: List[float], coord_ind: int, atol: float): bool<br ALIGN="LEFT"/>is_contained(normal_pos: float, contained_2d: List[ArrayFloat1D]): bool<br ALIGN="LEFT"/>make_grid_in_interval(left_neighbor_dl: float, right_neighbor_dl: float, max_dl: float, max_scale: float, len_interval: float): ArrayFloat1D<br ALIGN="LEFT"/>make_grid_multiple_intervals(max_dl_list: ArrayFloat1D, len_interval_list: ArrayFloat1D, max_scale: float, is_periodic: bool): List[ArrayFloat1D]<br ALIGN="LEFT"/>parse_structures(axis: Axis, structures: List[StructureType], wavelength: pd.PositiveFloat, min_steps_per_wvl: pd.NonNegativeInt, dl_min: pd.NonNegativeFloat): Tuple[ArrayFloat1D, ArrayFloat1D]<br ALIGN="LEFT"/>reorder_structures_enforced_to_end(structures: List[StructureType]): Tuple[int, List[StructureType]]<br ALIGN="LEFT"/>rotate_structure_bounds(structures: List[StructureType], axis: Axis): List[ArrayFloat1D]<br ALIGN="LEFT"/>structure_steps(structures: List[StructureType], wavelength: float, min_steps_per_wvl: float, dl_min: pd.NonNegativeFloat, axis: Axis): ArrayFloat1D<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tidy3d.components.grid.grid.Grid" [color="black", fontcolor="black", label=<{Grid|boundaries<br ALIGN="LEFT"/>centers<br ALIGN="LEFT"/>num_cells<br ALIGN="LEFT"/>sizes<br ALIGN="LEFT"/>yee<br ALIGN="LEFT"/>|discretize_inds(box: Box, extend: bool): List[Tuple[int, int]]<br ALIGN="LEFT"/>extended_subspace(axis: Axis, ind_beg: int, ind_end: int, periodic: bool): Coords1D<br ALIGN="LEFT"/>snap_to_box_zero_dim(box: Box)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tidy3d.components.grid.grid_spec.GridSpec" [color="black", fontcolor="black", label=<{GridSpec|auto_grid_used<br ALIGN="LEFT"/>custom_grid_used<br ALIGN="LEFT"/>grid_x : Union<br ALIGN="LEFT"/>grid_y : Union<br ALIGN="LEFT"/>grid_z : Union<br ALIGN="LEFT"/>override_structures : Tuple[annotate_type(StructureType), ...]<br ALIGN="LEFT"/>override_structures_used<br ALIGN="LEFT"/>snapping_points : Tuple[Coordinate, ...]<br ALIGN="LEFT"/>wavelength : float<br ALIGN="LEFT"/>|auto(wavelength: pd.PositiveFloat, min_steps_per_wvl: pd.PositiveFloat, max_scale: pd.PositiveFloat, override_structures: List[StructureType], snapping_points: Tuple[Coordinate, ...], dl_min: pd.NonNegativeFloat, mesher: MesherType): GridSpec<br ALIGN="LEFT"/>from_grid(grid: Grid): GridSpec<br ALIGN="LEFT"/>make_grid(structures: List[Structure], symmetry: Tuple[Symmetry, Symmetry, Symmetry], periodic: Tuple[bool, bool, bool], sources: List[SourceType], num_pml_layers: List[Tuple[pd.NonNegativeInt, pd.NonNegativeInt]]): Grid<br ALIGN="LEFT"/>uniform(dl: float): GridSpec<br ALIGN="LEFT"/>wavelength_from_sources(sources: List[SourceType]): pd.PositiveFloat<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tidy3d.components.grid.grid_spec.GridSpec1d" [color="black", fontcolor="black", label=<{GridSpec1d|<br ALIGN="LEFT"/>|make_coords(axis: Axis, structures: List[StructureType], symmetry: Tuple[Symmetry, Symmetry, Symmetry], periodic: bool, wavelength: pd.PositiveFloat, num_pml_layers: Tuple[pd.NonNegativeInt, pd.NonNegativeInt], snapping_points: Tuple[Coordinate, ...]): Coords1D<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tidy3d.components.grid.mesher.Mesher" [color="black", fontcolor="black", label=<{Mesher|<br ALIGN="LEFT"/>|<I>insert_snapping_points</I>(axis: Axis, interval_coords: ArrayFloat1D, max_dl_list: ArrayFloat1D, snapping_points: List[Coordinate]): Tuple[ArrayFloat1D, ArrayFloat1D]<br ALIGN="LEFT"/><I>make_grid_multiple_intervals</I>(max_dl_list: ArrayFloat1D, len_interval_list: ArrayFloat1D, max_scale: float, is_periodic: bool): List[ArrayFloat1D]<br ALIGN="LEFT"/>make_shapely_box(bbox: Bound): shapely_box<br ALIGN="LEFT"/><I>parse_structures</I>(axis: Axis, structures: List[StructureType], wavelength: pd.PositiveFloat, min_steps_per_wvl: pd.NonNegativeInt, dl_min: pd.NonNegativeFloat): Tuple[ArrayFloat1D, ArrayFloat1D]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tidy3d.components.grid.grid_spec.UniformGrid" [color="black", fontcolor="black", label=<{UniformGrid|dl : PositiveFloat, float<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tidy3d.components.grid.grid.YeeGrid" [color="black", fontcolor="black", label=<{YeeGrid|E<br ALIGN="LEFT"/>H<br ALIGN="LEFT"/>grid_dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tidy3d.components.grid.grid_spec.AutoGrid" -> "tidy3d.components.grid.grid_spec.GridSpec1d" [arrowhead="empty", arrowtail="none"];
"tidy3d.components.grid.grid_spec.CustomGrid" -> "tidy3d.components.grid.grid_spec.GridSpec1d" [arrowhead="empty", arrowtail="none"];
"tidy3d.components.grid.grid_spec.CustomGridBoundaries" -> "tidy3d.components.grid.grid_spec.GridSpec1d" [arrowhead="empty", arrowtail="none"];
"tidy3d.components.grid.grid_spec.UniformGrid" -> "tidy3d.components.grid.grid_spec.GridSpec1d" [arrowhead="empty", arrowtail="none"];
"tidy3d.components.grid.mesher.GradedMesher" -> "tidy3d.components.grid.mesher.Mesher" [arrowhead="empty", arrowtail="none"];
"tidy3d.components.grid.grid.Coords" -> "tidy3d.components.grid.grid.FieldGrid" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="x", style="solid"];
"tidy3d.components.grid.grid.Coords" -> "tidy3d.components.grid.grid.FieldGrid" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="y", style="solid"];
"tidy3d.components.grid.grid.Coords" -> "tidy3d.components.grid.grid.FieldGrid" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="z", style="solid"];
"tidy3d.components.grid.grid.Coords" -> "tidy3d.components.grid.grid.Grid" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="boundaries", style="solid"];
"tidy3d.components.grid.grid.FieldGrid" -> "tidy3d.components.grid.grid.YeeGrid" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="E", style="solid"];
"tidy3d.components.grid.grid.FieldGrid" -> "tidy3d.components.grid.grid.YeeGrid" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="H", style="solid"];
}
